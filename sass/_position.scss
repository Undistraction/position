@import 'position/support';

/**
 * Mixins for setting an elements position and offsets based on the original mixin by Hugo
 * Giraudel found [here](http://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin/)
 * @author Pedr Browne
 **/

/**
 * @param {String} $position
 *  One of absolute | relative | fixed
 *
 * @param {List} $args (())
 *  A list of offset keywords and values. Some keywords require a following value, some do not
 *  accept a following value, and for some the value is optional. The possible values are:
 *
 *  - `top`, `bottom`, `left`, and `right` If one of these keywords is followed by a value, the
 *  offset will be set to that value. If no value follows, the offset will be set to zero.
 *  - `offset | all | offset-h | offset-v` All these values require a value. `offset` and `all`
 *    (which is just an alias of `offset`) will set all four offsets ('top', 'bottom', 'left'
 *    and `right`) to the following value. `offset-h` will set the `left` and `right` offsets to the
 *    following value, and `offset-v` will set the `top` and `bottom` offsets to the following
 *    value.
 *  - `fill`, `fill-h` and `fill-v` do not take a following value. `fill` will set all offsets to
 *    zero. `fill-h` will set the `left` and `right` offsets to zero, and `fill-v` will set the
 *    `top` and `bottom` offsets to zero.
 *
 *  Values are evaluated from left to right with later values overriding earlier values.
 *
 * @example scss - Usage
 *   .element {
 *     @include position(absolute, left top 10px);
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     position: absolute;
 *     left: 0;
 *     top: 10px;
 *   }
 *
 * @throws Argument Error
 * @output Outputs the position property and any given offset properties
 */
@mixin position($position, $args: ()) {

  // Offsets acts as our model. We use the args to adjust its
  // values and untimately use it to render.
  $offsets: (
    "top": null,
    "right": null,
    "bottom": null,
    "left": null
  );

  // If a keyword accepted a value and it was present $skip will be set to true so
  // that we don't parse that value as a keyword and skip on to the next item
  $skip: false;

  // Run through each item, checking its validity and setting any offsets it
  // effects.
  @each $item in $args {

    @if not $skip {
      // Setup for this iteration
      $index: index($args, $item);
      $is-last-item: $index == length($args);
      $next-item: null;

      @if not $is-last-item {
        $next-item: nth($args, $index + 1);
      }

      // Handle keyword that doesn't accept a value
      @if index($pos-always-valueless, $item) {
        @if $is-last-item or pos-is-keyword($next-item) {
          $offsets: pos-parse-offsets-for-always-valueless($offsets, $item);
        } @else {
          @error "Argument Error: `#{$item}` cannot be followed by a value, yet one has been found: `#{$next-item}`.";
        }

      // Ensure there is a following value and that it is not unitless
      } @else if index($pos-always-value, $item) {
        // Do we have a united next item?
        @if not $is-last-item and pos-is-valid-value($next-item) {
          $skip: true;
          $offsets: pos-parse-offsets-for-always-value($offsets, $item, $next-item);
        } @else {
          @error "Argument Error: `#{$item}` should be followed by a valid value, yet it was `#{$next-item}`.";
        }

      } @else if index($pos-support-valueless, $item) {
        // Is the next item is a valid value?
        $value: null;

        @if not $is-last-item and pos-is-valid-value($next-item) {
          $skip: true;
          $value: $next-item;

        // Otherwise treat as having a value of zero
        } @else {
          $value: 0;
        }

        $offsets: map-merge($offsets, ($item: $value));
      } @else {
        @error "Argument Error: `#{$item}` is not a valid keyword.";
      }

    } @else {
      // We skipped this item, so reset for next iteration
      $skip: false;
    }
  }

  @include pos-render($position, $offsets);
}

// Shorthand Mixins

/**
 * Shorthand for `@include position(absolute, args)`.
 * @param {List} $args A list of offset keywords and values.
 * @output Outputs the position property and any given offset properties
 * @see {mixin} position
 */
@mixin absolute($args: ()) {
  @include position(absolute, $args);
}

/**
 * Shorthand for `@include position(absolute, args)`.
 * @param {List} $args A list of offset keywords and values.
 * @output Outputs the position property and any given offset properties
 * @see {mixin} position
 */
@mixin fixed($args: ()) {
  @include position(fixed, $args);
}

/**
 * Shorthand for `@include position(absolute, args)`.
 * @param {List} $args A list of offset keywords and values.
 * @output Outputs the position property and any given offset properties
 * @see {mixin} position
 */
@mixin relative($args: ()) {
  @include position(relative, $args);
}
