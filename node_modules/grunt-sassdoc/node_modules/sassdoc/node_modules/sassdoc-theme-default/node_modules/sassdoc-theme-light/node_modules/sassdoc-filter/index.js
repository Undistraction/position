'use strict';

var marked = require('marked');
var indexer = require('sassdoc-indexer');
var path = require('path');

module.exports = {

  /**
   * Apply Markdown on some text fields.
   */
  markdown: function (ctx) {
    if (ctx.package && ctx.package.description) {
      ctx.package.htmlDescription = marked(ctx.package.description);
    }

    /**
     * Wrapper for `marked` that takes only one argument to avoid
     * problem with `map` additional arguments.
     */
    function md(str) {
      return marked(str);
    }

    /**
     * Return a function that will apply `fn` on `obj[key]` to generate
     * `obj[newKey]`.
     */
    function applyKey(fn, key, newKey) {
      return function (obj) {
        if (key in obj) {
          obj[newKey] = fn(obj[key]);
        }

        return obj;
      };
    }

    for (var type in ctx.data) {
      for (var name in ctx.data[type]) {
        var item = ctx.data[type][name];

        if ('description' in item) {
          item.htmlDescription = marked(item.description);
        }

        if ('author' in item) {
          item.htmlAuthor = item.author.map(md);
        }

        if ('throws' in item) {
          item.htmlThrows = item.throws.map(md);
        }

        if ('todo' in item) {
          item.htmlTodo = item.todo.map(md);
        }

        if ('returns' in item) {
          item.htmlReturns = item.returns.map(
            applyKey(md, 'description', 'htmlDescription')
          );
        }

        if ('example' in item) {
          item.example = item.example.map(
            applyKey(md, 'description', 'htmlDescription')
          );
        }

        if ('parameters' in item) {
          item.parameters = item.parameters.map(
            applyKey(md, 'description', 'htmlDescription')
          );
        }

        if ('prop' in item) {
          item.prop = item.prop.map(
            applyKey(md, 'description', 'htmlDescription')
          );
        }

        if ('content' in item) {
          item.content = item.content.map(
            applyKey(md, 'description', 'htmlDescription')
          );
        }
      }
    }
  },

  /**
   * Compute a `display` property regarding of access display
   * configuration.
   */
  display: function (ctx) {
    var shouldBeDisplayed = function (item) {
      var displayItemAccess = ctx.view.display.access.indexOf(item.access[0]) !== -1;
      var isAlias = item.alias;
      var displayAlias = ctx.view.display.alias;

      return displayItemAccess && !(isAlias && !displayAlias);
    };

    ctx.data.count = 0;

    indexer.eachItem(ctx.data, function (item) {
      item.display = shouldBeDisplayed(item);

      if (item.display) {
        ctx.data.count++;
      }
    });
  },

  /**
   * Compute a `groupName` object from `group` array with slug as key and
   * title as value.
   *
   * Also compute a `groups` property in `ctx`.
   */
  groupName: function (ctx) {
    ctx.groups = 'groups' in ctx.view ? ctx.view.groups : {};

    indexer.eachItem(ctx.data, function (item) {
      var group = {};

      item.group.forEach(function (groups) {
        groups.forEach(function (slug) {
          if (slug in ctx.groups) {
            group[slug] = ctx.groups[slug];
          } else {
            group[slug] = ctx.groups[slug] = slug;
          }
        });
      });

      item.groupName = group;
    });
  },

  /**
   * Figure out a shortcut icon, and whether it is external or a local
   * file to copy.
   *
   * You can specify a local or external URL in `ctx.view.shortcutIcon`.
   *
   * For a local file, it will be relative to `ctx.dir`.
   *
   * A `ctx.shortcutIcon` property is then created and will look like
   * this:
   *
   *     {
   *       "type": "external|internal",
   *       "url": "external URL or file base name",
   *       "path": "only for internal, file absolute path"
   *     }
   */
  shortcutIcon: function (ctx) {
    var icon = ctx.view.shortcutIcon;

    if (!icon) {
      return;
    }

    if (/^([a-z]+:)?\/\//.test(icon)) {
      // External URL
      ctx.shortcutIcon = {type: 'external', url: icon};
      return;
    }

    ctx.shortcutIcon = {
      type: 'internal',
      url: path.basename(icon),
      path: path.resolve(ctx.dir, icon),
    };
  },
};
