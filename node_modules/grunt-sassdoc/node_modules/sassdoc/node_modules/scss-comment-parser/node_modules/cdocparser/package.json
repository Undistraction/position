{
  "name": "cdocparser",
  "version": "0.3.3",
  "description": "Extract C style comments and extract context from source",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/FWeinb/CDocParser"
  },
  "scripts": {
    "test": "mocha test"
  },
  "keywords": [
    "doc",
    "documentation",
    "extract",
    "parse"
  ],
  "author": {
    "name": "Fabrice Weinberg",
    "email": "Fabrice@weinberg.me"
  },
  "license": "MIT",
  "devDependencies": {
    "assert": "^1.1.1"
  },
  "dependencies": {
    "strip-indent": "^0.1.3",
    "lodash.assign": "^2.4.1"
  },
  "readme": "CDocParser\n---\nCDocParser is a language agnostic C and `///`-Style comments parser that uses block and line comments to make it easier to generate documentation.\n\n\n## Install\n\n```bash\n$ npm install --save cdocparser\n```\n\n\n## Usage\n\nCDocParser consists of two parts the `CommentExtractor` and a `CommentParser`.\n\n\n```js\nvar CDocParser = require('cdocparser');\nvar extractor = new CDocParser.CommentExtractor(/* contextParser */ );\nvar parser = new CDocParser.CommentParser(/* Annotations */);\n\nvar comments = extractor.extract(/* code */);\nvar parsedComments = parser.parse(comments);\n\nconsole.log(parsedComments);\n```\n\n## API\n\n### CommentExtractor\n\nThe ComemntExtractor is used to extract C and `///`-Style comments from source and attach context information to it.\n\n#### `new CommentExtractor(contextParser)`\n\nCreate a CommentExtractor to extract block comment like:\n\n```\n/**\n *\n *  CDocComment\n *\n */\n```\n\nYou need to pass in a function that is used to generate a `context` object used to specify the context of the comment.\nA context obj:\n\n```js\n{\n  type : 'contextType'\n}\n```\n\nThe `type` attribute is mandatory, you can add as much attributes as you would like.\n\n#### `#extract(code)`\n\nThis method will return an Array of all comments in the form of\n\n```js\n[\n  {\n    lines: {}, \n    context: [context object generated by contextParser]\n  }\n]\n```\n\n\n### CommentParser\n\n#### `new CommentParser(annotations)`\n\nCreate a new `CommentParser` where `annotaions` is an object like:\n```js\n{\n  _: {\n    alias: {\n      'aliasName': 'aRealAnnotation'\n    }\n  },\n\n  aRealAnnotation: {\n    parse : function (annotationLine) {\n    \n    },\n    default : function(){\n      return 5;\n    }\n  }\n}\n```\n\nThis object is used to provide parser for various types of annotations. It also includes tha ability to include aliases.\n\n#### `#parse ( comments )`\n\nThis methods takes a comments array provided by `CommentExtractor#extract` and parses all annotations. The resulting\nobject will look like:\n\n```js\n{\n  \"[context.type]\" : [\n    {\n      description : \"[Contains all comment lines without an annotation]\",\n      [annotationName] : [resultOfAnnotationParser]\n    }\n  ]\n}\n```\n\n## Development\n\nUse `mocha test` to run the unit tests.\n\n## Changelog\n\n#### 0.3.3\n\n * Fix a bug with line comments that are indented\n\n#### 0.3.2\n \n * Add `allowedOn` key to annotations to only apply them to comments from a specifc type\n\n#### 0.3.0 \n\n * Add support for `///` comments \n * Add a `lineNumber` function as a second parameter that will convert char indices to line numbers\n\n#### 0.2.2\n\n  * Add a `poster comment` to apply annotations to all items in the file that are documented.\n  * Emits a `warning` if you use more than on `poster comment` per file. Only the first one will be used.\n\n#### 0.2.1\n \n  * Emits a `warning` if a annotation was not found instead of throwing an exception.\n\n#### 0.2.0 \n \n  * Throw an error if annotation was not found\n\n#### 0.1.1\n  \n  * Ignore annotations that return `undefined`.\n\n#### 0.1.0 \n  \n  * Restructure annotation function. Add `default` value and `parse` function.\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/FWeinb/CDocParser/issues"
  },
  "homepage": "https://github.com/FWeinb/CDocParser",
  "_id": "cdocparser@0.3.3",
  "_shasum": "60ba30fcb6c7482647aa80fdf4c6ae3f7efc7622",
  "_from": "cdocparser@^0.3.0",
  "_resolved": "https://registry.npmjs.org/cdocparser/-/cdocparser-0.3.3.tgz"
}
